@page
@model Wms.Pages.Gallery.GameOfLifeModel
@{
    Layout = "Layouts/_DarkBookstore";
    ViewData["Title"] = "Home";
}

<partial name="/Partials/Bookstore/_MenuPartial.cshtml" />

<h1 style="margin: 0 auto; text-align:center;">Game of Life</h1>

<div style="margin:0 auto; text-align:center;">
    <canvas id="canvas" width="750" height="400" style="border:1px solid lightgrey;">
        Your browser does not support the HTML5 canvas tag.
    </canvas>
</div>

<a href="/Gallery/Index">Back to gallery</a>

@section Scripts {
<script>
    class Cell {
        // Set the size for each cell
        static width = 10;
        static height = 10;

        aliveColor = '#ff8080';
        deadColor = '#303030';

        constructor(context, gridX, gridY) {
            this.context = context;

            // Store the position of this cell in the grid
            this.gridX = gridX;
            this.gridY = gridY;

            // Make random squares alive
            this.alive = Math.random() > 0.5;
        }

        draw() {
            // Draw a square, let the state determine the color
            this.context.fillStyle = this.alive ? this.aliveColor : this.deadColor;
            this.context.fillRect(this.gridX * Cell.width, this.gridY * Cell.height, Cell.width, Cell.height);
        }
    }

    class GameWorld {

        static numColumns = 240;
        static numRows = 200;

        constructor(canvasId) {
            this.canvas = document.getElementById(canvasId);
            this.context = this.canvas.getContext('2d');
            this.gameObjects = [];

            this.createGrid();

            // Request an animation frame for the first time
            // The gameLoop() function will be called as a callback of this request
            window.requestAnimationFrame(() => this.gameLoop());
        }

        createGrid() {
            for (let y = 0; y < GameWorld.numRows; y++) {
                for (let x = 0; x < GameWorld.numColumns; x++) {
                    this.gameObjects.push(new Cell(this.context, x, y));
                }
            }
        }

        isAlive(x, y) {
            if (x < 0 || x >= GameWorld.numColumns || y < 0 || y >= GameWorld.numRows) {
                return false;
            }

            return this.gameObjects[this.gridToIndex(x, y)].alive ? 1 : 0;
        }

        gridToIndex(x, y) {
            return x + (y * GameWorld.numColumns);
        }

        checkSurrounding() {
            // Loop over all cells
            for (let x = 0; x < GameWorld.numColumns; x++) {
                for (let y = 0; y < GameWorld.numRows; y++) {

                    // Count the nearby population
                    let numAlive = this.isAlive(x - 1, y - 1) + this.isAlive(x, y - 1) + this.isAlive(x + 1, y - 1) + this.isAlive(x - 1, y) + this.isAlive(x + 1, y) + this.isAlive(x - 1, y + 1) + this.isAlive(x, y + 1) + this.isAlive(x + 1, y + 1);
                    let centerIndex = this.gridToIndex(x, y);

                    if (numAlive == 2) {
                        // Do nothing
                        this.gameObjects[centerIndex].nextAlive = this.gameObjects[centerIndex].alive;
                    } else if (numAlive == 3) {
                        // Make alive
                        this.gameObjects[centerIndex].nextAlive = true;
                    } else {
                        // Make dead
                        this.gameObjects[centerIndex].nextAlive = false;
                    }
                }
            }

            // Apply the new state to the cells
            for (let i = 0; i < this.gameObjects.length; i++) {
                this.gameObjects[i].alive = this.gameObjects[i].nextAlive;
            }
        }

        gameLoop() {
            // Check the surrounding of each cell
            this.checkSurrounding();

            // Clear the screen
            this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);

            // Draw all the gameobjects
            for (let i = 0; i < this.gameObjects.length; i++) {
                this.gameObjects[i].draw();
            }

            // The loop function has reached it's end, keep requesting new frames
            @* setTimeout(() => {
                window.requestAnimationFrame(() => this.gameLoop());
            }, 100) *@

            window.requestAnimationFrame(() => this.gameLoop());
        }
    }

    (function () {
        // The page has loaded, start the game
        let gameWorld = new GameWorld('canvas');
    }());
</script>
}