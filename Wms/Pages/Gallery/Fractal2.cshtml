@page
@model Wms.Pages.Gallery.Fractal2Model
@{
    Layout = "Layouts/_DarkBookstore";
    ViewData["Title"] = "Home";
}

<partial name="/Partials/Bookstore/_MenuPartial.cshtml" />

<h1 style="margin: 0 auto; text-align:center;">Fractal 2</h1>

<div style="margin:0 auto;">
    <canvas id="fractal" style="width: 100%"></canvas>
</div>

<a href="/Gallery/Index">Back to gallery</a>

@section Scripts {
<script>
            var FF = function (opt) {
                var api = {};
                opt = opt || {};
                api.ani = {};
                api.forFrame = opt.forFrame || function () {};
                var setMainPerAndBias = function (api) {
                    api.per = api.frameIndex / api.maxFrame;
                    api.bias = 1 - Math.abs(0.5 - api.per) / 0.5;
                };
                var forFrame = function (frameIndex, maxFrame) {
                    api.frameIndex = frameIndex;
                    api.maxFrame = maxFrame;
                    setMainPerAndBias(api);
                    api.forFrame.call(api, api, frameIndex, maxFrame);
                    return api.ani;
                };
                return function (frame, maxFrame) {
                    frame = frame === undefined ? 0 : frame;
                    maxFrame = maxFrame === undefined ? 50 : maxFrame;
                    frame = frame > maxFrame ? frame % maxFrame : frame;
                    frame = frame < 0 ? maxFrame - Math.abs(frame) % maxFrame : frame;
                    forFrame(frame, maxFrame);
                    return api.ani;
                };
            };

            var canvas = document.getElementById('fractal'),
        ctx = canvas.getContext('2d');
        ctx.translate(0.5, 0.5);

        var opt = {
            forFrame: function (api, f, mf) {
                var bxArr = api.ani.bxArr = [];
                var i = 0,
                per,
                bxCount = 10,
                maxSize = canvas.width;
                while (i < bxCount) {
                    // figure out the percent for the current box
                    per = api.per + 1 / bxCount * i;
                    per %= 1;
                    // create and push the box
                    bx = {};
                    bx.w = maxSize * per;
                    bx.h = maxSize * per;
                    bx.x = canvas.width / 2 - (bx.w / 2);
                    bx.y = canvas.height / 2 - (bx.h / 2);
                    bx.per = bx.w / maxSize;
                    bxArr.push(bx);
                    i += 1;
                }
                bxArr.sort(function (a, b) {
                    if (a.per > b.per) {
                        return 1;
                    }
                    return -1;
                });
            }
        };

        // create an animation method
        var ani = FF(opt);

        var frame = 0;
        var loop = function () {
            requestAnimationFrame(loop);
            draw.back(ctx, canvas)
            draw.bxArr(ctx, ani(frame, 200));

            frame += 1;
            frame %= 200;

        };
        loop();

        // DRAW
    var draw = {};
    draw.bx = function (ctx, bx) {
        ctx.strokeStyle = 'white';
        ctx.globalAlpha = 0.05 + bx.per * 0.95;
        ctx.lineWidth = 6;
        ctx.beginPath();
        ctx.rect(bx.x, bx.y, bx.w, bx.h);
        ctx.stroke();
    };
    draw.bxArr = function (ctx, ani) {
        var i = 0,
        len = ani.bxArr.length;
        ctx.save();
        while (i < len) {
            draw.bx(ctx, ani.bxArr[i]);
            i += 1;
        }
        ctx.restore();
    };
    draw.back = function (ctx, canvas) {
        ctx.fillStyle = 'black';
        ctx.fillRect(0, 0, canvas.width, canvas.height);
    };
</script>
}